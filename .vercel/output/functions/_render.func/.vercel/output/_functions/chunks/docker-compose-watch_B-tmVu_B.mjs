import { d as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_BGXLXoF4.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>My favorite use case for <em>Docker</em> is to spin up a local database for development purposes.\r\nTaking this a step further, it is possible to run all neccessary components of your application with a single <em>Docker Compose</em> configuration.\r\nUntil recently, this has been a painful method of doing development since any code changes would require a full restart to take effect.</p>\n<p>Instroduced in a recent update, <code>docker compose watch</code> allows <em>Docker Compose</em> services to monitor certain code paths and update as you edit and save code.\r\nIn this article I will show you how to set up a project using <em>Next.js</em> and <em>PostgreSQL</em> that can be spun up locally using this command.</p>\n<h2 id=\"creating-the-nextjs-app\">Creating the Next.js App</h2>\n<p>To create our <em>Next.js</em> app simply run:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npx</span><span style=\"color:#98C379\"> create-next-app@latest</span></span></code></pre>\n<p>From there, follow the instructions in the terminal to select which components to include. I recommend the default options, <em>TypeScript</em>, <em>ESLint</em>, <em>app directory</em>, etc.</p>\n<p>After everything finishes downloading we should be able to run our application in development mode using <code>npm run dev</code>. But we want to run this app using <em>Docker</em> so lets create a <em>Dockerfile</em>:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> Dockerfile</span></span></code></pre>\n<p>Inspired by <a href=\"https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/next-app/dev.Dockerfile\">Next.js’s dev Dockerfile example</a>, let’s write instructions to copy the source code over to the container’s /app directory, install the necessary dependencies and run the application in development mode:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">FROM</span><span style=\"color:#ABB2BF\"> node:alpine</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">RUN</span><span style=\"color:#ABB2BF\"> mkdir -p /app</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">WORKDIR</span><span style=\"color:#ABB2BF\"> /app</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">COPY</span><span style=\"color:#ABB2BF\"> package*.json /app</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">RUN</span><span style=\"color:#ABB2BF\"> npm install</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">COPY</span><span style=\"color:#ABB2BF\"> . /app</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">EXPOSE</span><span style=\"color:#ABB2BF\"> 3000</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">CMD</span><span style=\"color:#ABB2BF\"> [</span><span style=\"color:#98C379\">\"npm\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"run\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"dev\"</span><span style=\"color:#ABB2BF\">]</span></span></code></pre>\n<p>At this point we have a runnable docker container for our app. Let’s get started with our <em>docker-compose.yaml</em> and add a profile for this app.</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> docker-compose.yaml</span></span></code></pre>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">version</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"3\"</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">services</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  next-app</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    container_name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">next-app</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    build</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      dockerfile</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">Dockerfile</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    volumes</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">./src:/app/src</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">./public:/app/public</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    restart</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">always</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    ports</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">3000:3000</span></span></code></pre>\n<p>Now our app can be run by running <code>docker compose up</code>.</p>\n<h2 id=\"creating-the-postgres-database\">Creating the Postgres Database</h2>\n<p>Let’s create a local database using the official <a href=\"https://hub.docker.com/_/postgres\">Postgres Docker image</a>.\r\nWe can do this by appending the following to our <em>docker-compose.yaml</em>:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">  postgres-db</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    image</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">postgres:16.0</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    container_name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">postgres-db</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    restart</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">always</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    environment</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_DB</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">example</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_USER</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">root</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_PASSWORD</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">123</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    ports</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">5432:5432</span></span></code></pre>\n<p>Now <code>docker compose up</code> additionally spins up a local database which we can connect to by adding the following connection string to a <em>.env</em> file in the root of our <em>Next.js</em> project:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">POSTGRES_URL</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"postgres://root:123@localhost:5432/example\"</span></span></code></pre>\n<p>We currently have no way of testing our database through our <em>Next.js</em> app but we can verify that the database is running by executing <code>psql example</code> through <em>Docker Desktop</em>:\r\n<img src=\"/assets/docker-desktop-psql.png\" alt=\"Docker Desktop\"></p>\n<h2 id=\"populating-the-database\">Populating the Database</h2>\n<p>To interact with our database from our <em>Next.js</em> app we need an ORM tool. Let’s install my favorite database ORM <em>drizzle-orm</em>:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npm</span><span style=\"color:#98C379\"> install</span><span style=\"color:#98C379\"> drizzle-orm</span><span style=\"color:#98C379\"> postgres</span><span style=\"color:#98C379\"> pg</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">npm</span><span style=\"color:#98C379\"> install</span><span style=\"color:#D19A66\"> -D</span><span style=\"color:#98C379\"> drizzle-kit</span></span></code></pre>\n<p>Now let’s set up our first table using <em>drizzle-orm</em> by loosely following the <a href=\"https://orm.drizzle.team/kit-docs/quick\">official quick start example</a>:</p>\n<ol>\n<li>Create our first schema:</li>\n</ol>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> src/schema/post.ts</span></span></code></pre>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">serial</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75\">text</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75\">timestamp</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75\">pgTable</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"drizzle-orm/pg-core\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">export</span><span style=\"color:#C678DD\"> const</span><span style=\"color:#E5C07B\"> post</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> pgTable</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"post\"</span><span style=\"color:#ABB2BF\">, {</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  id</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#61AFEF\">serial</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"id\"</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  text</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#61AFEF\">text</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"text\"</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  createdAt</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#61AFEF\">timestamp</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"created_at\"</span><span style=\"color:#ABB2BF\">).</span><span style=\"color:#61AFEF\">default</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#C678DD\">new</span><span style=\"color:#61AFEF\"> Date</span><span style=\"color:#ABB2BF\">()),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">});</span></span></code></pre>\n<ol start=\"2\">\n<li>Create our <em>drizzle</em> configuration:</li>\n</ol>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> drizzle.config.ts</span></span></code></pre>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#C678DD\"> type</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">Config</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"drizzle-kit\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">export</span><span style=\"color:#C678DD\"> default</span><span style=\"color:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  schema</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"./src/schemas/*.ts\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  out</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"./src/migrations\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  driver</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"pg\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  dbCredentials</span><span style=\"color:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    connectionString</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#E5C07B\">process</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">env</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">POSTGRES_URL</span><span style=\"color:#56B6C2\">!</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">} </span><span style=\"color:#C678DD\">satisfies</span><span style=\"color:#E5C07B\"> Config</span><span style=\"color:#ABB2BF\">;</span></span></code></pre>\n<ol start=\"3\">\n<li>Create our first migration:</li>\n</ol>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npx</span><span style=\"color:#98C379\"> drizzle-kit</span><span style=\"color:#98C379\"> generate:pg</span></span></code></pre>\n<p>This will create a migration file under <em>src/migrations</em>.</p>\n<ol start=\"4\">\n<li>Apply our migration:</li>\n</ol>\n<p>First let’s install some necessary dev dependencies:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npm</span><span style=\"color:#98C379\"> install</span><span style=\"color:#D19A66\"> -D</span><span style=\"color:#98C379\"> dotenv</span><span style=\"color:#98C379\"> tsx</span></span></code></pre>\n<p>Then we can create a migration script:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> src/scripts/migrate.ts</span></span></code></pre>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> postgres</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> \"postgres\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">migrate</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"drizzle-orm/postgres-js/migrator\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">drizzle</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"drizzle-orm/postgres-js\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> dotenv</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> \"dotenv\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">dotenv</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">config</span><span style=\"color:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">(</span><span style=\"color:#C678DD\">async</span><span style=\"color:#ABB2BF\"> () </span><span style=\"color:#C678DD\">=></span><span style=\"color:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  const</span><span style=\"color:#E5C07B\"> connectionString</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#E5C07B\"> process</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">env</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">POSTGRES_URL</span><span style=\"color:#56B6C2\">!</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  const</span><span style=\"color:#E5C07B\"> migrationsClient</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> postgres</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75\">connectionString</span><span style=\"color:#ABB2BF\">, { </span><span style=\"color:#E06C75\">max</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">1</span><span style=\"color:#ABB2BF\"> });</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  const</span><span style=\"color:#E5C07B\"> db</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> drizzle</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75\">migrationsClient</span><span style=\"color:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  await</span><span style=\"color:#61AFEF\"> migrate</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75\">db</span><span style=\"color:#ABB2BF\">, { </span><span style=\"color:#E06C75\">migrationsFolder</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"./src/migrations\"</span><span style=\"color:#ABB2BF\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  await</span><span style=\"color:#E5C07B\"> migrationsClient</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">end</span><span style=\"color:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">})();</span></span></code></pre>\n<p>Now we can apply our migration by running the script like so:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npx</span><span style=\"color:#98C379\"> tsx</span><span style=\"color:#98C379\"> src/scripts/migration.tsx</span></span></code></pre>\n<p>Finally we can populate our database using <em>Drizzle Studio</em>:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">npx</span><span style=\"color:#98C379\"> drizzle-kit</span><span style=\"color:#98C379\"> studio</span></span></code></pre>\n<p><img src=\"/assets/drizzle-studio.png\" alt=\"Drizzle Studio\"></p>\n<h2 id=\"connecting-to-the-database\">Connecting to the Database</h2>\n<p>Now that we have a database up-and-running with data, let’s display it in our <em>Next.js</em> app!\r\nTo do that we must first create a database client:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">touch</span><span style=\"color:#98C379\"> src/db.ts</span></span></code></pre>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">drizzle</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#C678DD\">type</span><span style=\"color:#E06C75\"> PostgresJsDatabase</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"drizzle-orm/postgres-js\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> postgres</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> \"postgres\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">// Fix for \"sorry, too many clients already\"</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">declare</span><span style=\"color:#E06C75\"> global</span><span style=\"color:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">  // eslint-disable-next-line no-var -- only var works here</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  var</span><span style=\"color:#E06C75\"> db</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#E5C07B\">PostgresJsDatabase</span><span style=\"color:#ABB2BF\"> | </span><span style=\"color:#E5C07B\">undefined</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">let</span><span style=\"color:#E06C75\"> db</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#E5C07B\">PostgresJsDatabase</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">if</span><span style=\"color:#ABB2BF\"> (</span><span style=\"color:#E5C07B\">process</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">env</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">NODE_ENV</span><span style=\"color:#56B6C2\"> ===</span><span style=\"color:#98C379\"> \"production\"</span><span style=\"color:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  db</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> drizzle</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#61AFEF\">postgres</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">process</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">env</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">POSTGRES_URL</span><span style=\"color:#56B6C2\">!</span><span style=\"color:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">} </span><span style=\"color:#C678DD\">else</span><span style=\"color:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  if</span><span style=\"color:#ABB2BF\"> (</span><span style=\"color:#56B6C2\">!</span><span style=\"color:#E5C07B\">global</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">db</span><span style=\"color:#ABB2BF\">) </span><span style=\"color:#E5C07B\">global</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">db</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> drizzle</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#61AFEF\">postgres</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">process</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">env</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">POSTGRES_URL</span><span style=\"color:#56B6C2\">!</span><span style=\"color:#ABB2BF\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  db</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#E5C07B\"> global</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">db</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">export</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">db</span><span style=\"color:#ABB2BF\"> };</span></span></code></pre>\n<p>Using this client, let’s display the text from our first post entry by replacing the contents of <em>src/app/page.tsx</em> with the following:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">db</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"@/db\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">post</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"@/schemas/post\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> styles</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> \"./page.module.css\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">export</span><span style=\"color:#C678DD\"> default</span><span style=\"color:#C678DD\"> async</span><span style=\"color:#C678DD\"> function</span><span style=\"color:#61AFEF\"> Home</span><span style=\"color:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  const</span><span style=\"color:#E5C07B\"> posts</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#C678DD\"> await</span><span style=\"color:#E5C07B\"> db</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">select</span><span style=\"color:#ABB2BF\">().</span><span style=\"color:#61AFEF\">from</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75\">post</span><span style=\"color:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  return</span><span style=\"color:#ABB2BF\"> &#x3C;</span><span style=\"color:#E06C75\">main</span><span style=\"color:#D19A66;font-style:italic\"> className</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">{</span><span style=\"color:#E5C07B\">styles</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">main</span><span style=\"color:#C678DD\">}</span><span style=\"color:#ABB2BF\">></span><span style=\"color:#C678DD\">{</span><span style=\"color:#E06C75\">posts</span><span style=\"color:#ABB2BF\">[</span><span style=\"color:#D19A66\">0</span><span style=\"color:#ABB2BF\">].</span><span style=\"color:#E06C75\">text</span><span style=\"color:#C678DD\">}</span><span style=\"color:#ABB2BF\">&#x3C;/</span><span style=\"color:#E06C75\">main</span><span style=\"color:#ABB2BF\">>;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span></code></pre>\n<p>If we run our <em>Next.js</em> app locally we should see a black screen with the text “Hello World”.\r\nBut if we run this using <em>Docker Compose</em> we will get an error because our <em>Next.js</em> container is unable to connect to our <em>Postgres</em> container.\r\nThis is because our connection string uses localhost but for docker containers to connect to one another they must use the appropriate <em>Docker Compose</em> service name.</p>\n<p>Let’s fix this by adding the following line to our <em>.env</em> file:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">DOCKER_POSTGRES_URL</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"postgres://root:123@postgres-db:5432/example\"</span></span></code></pre>\n<p>And let’s tell <em>Docker Compose</em> to replace <em>POSTGRES_URL</em> with <em>DOCKER_POSTGRES_URL</em> by adding the following to our <em>docker-compose.yaml</em>’s next-app section:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">environment</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  POSTGRES_URL</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">${DOCKER_POSTGRES_URL}</span></span></code></pre>\n<p>If we run <code>docker compose up</code> now, we should see our text displaying correctly.\r\nBut if we save any additional changes while the app is running, our app does not update…</p>\n<h2 id=\"enabling-docker-compose-watch\">Enabling Docker Compose Watch</h2>\n<p>To leverage the hot-module reloading capabilities of <code>docker compose watch</code> we must define watch actions in our <em>docker-compose.yaml</em> to tell <em>Docker Compose</em> to sync our code when we save it.\r\nTo do this, replace our previously defined volumes with appropriate sync actions so that the final <em>docker-compose.yaml</em> file looks like this:</p>\n<pre class=\"astro-code one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#E06C75\">version</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"3\"</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">services</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  next-app</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    container_name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">next-app</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    restart</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">always</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    build</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      dockerfile</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">Dockerfile</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    environment</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_URL</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">${DOCKER_POSTGRES_URL}</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    develop</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      watch</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        - </span><span style=\"color:#E06C75\">action</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">sync</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">          path</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">./src</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">          target</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">/app/src</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">          ignore</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            - </span><span style=\"color:#98C379\">node_modules/</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        - </span><span style=\"color:#E06C75\">action</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">sync</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">          path</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">./public</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">          target</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">/app/public</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    ports</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">3000:3000</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  postgres-db</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    image</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">postgres:16.0</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    container_name</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">postgres-db</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    restart</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">always</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    environment</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_DB</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">example</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_USER</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">root</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">      POSTGRES_PASSWORD</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">123</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">    ports</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      - </span><span style=\"color:#98C379\">5432:5432</span></span></code></pre>\n<p>Now we can finally run <code>docker compose watch</code> to have our 2 containers run and respond to changes!</p>\n<p>And as our application grows in complexity we can add additional services to our <em>Docker Compose</em> configuration and enjoy the amazing DX benefits of <code>docker compose watch</code>.</p>\n<p>The source code for this project is available on <a href=\"https://github.com/kalmanodds/docker-compose-watch-example\">github</a>.</p>\n<h2 id=\"caveats\">Caveats</h2>\n<p><code>docker compose watch</code> does not print container output to the console like <code>docker compose up</code>.\r\nTo remedy this, we must attach to the containers in a separate terminal session or inspect the output via Docker Desktop.</p>\n<p>This new feature also lacks many common option paramters, so running <code>docker compose watch</code> in detached mode, for example, does not work.</p>";

				const frontmatter = {"author":"Sigurður Kalman Oddsson","publishedAt":"2024-02-24T17:35:00.000Z","title":"Full-Stack Development With Docker Compose Watch","postSlug":"docker-compose-watch","featured":true,"draft":false,"tags":["docker","nextjs","postgres"],"ogImage":"","description":"An introduction to `docker compose watch` and a tutorial on how to spin up a full-stack environment with this single command."};
				const file = "C:/Users/sigur/Documents/dev/astro-blog/src/content/blog/docker-compose-watch.md";
				const url = undefined;
				function rawContent() {
					return "My favorite use case for *Docker* is to spin up a local database for development purposes.\r\nTaking this a step further, it is possible to run all neccessary components of your application with a single *Docker Compose* configuration.\r\nUntil recently, this has been a painful method of doing development since any code changes would require a full restart to take effect. \r\n\r\nInstroduced in a recent update, `docker compose watch` allows *Docker Compose* services to monitor certain code paths and update as you edit and save code.\r\nIn this article I will show you how to set up a project using *Next.js* and *PostgreSQL* that can be spun up locally using this command.\r\n\r\n## Creating the Next.js App\r\n\r\nTo create our *Next.js* app simply run:\r\n```bash\r\nnpx create-next-app@latest\r\n```\r\nFrom there, follow the instructions in the terminal to select which components to include. I recommend the default options, *TypeScript*, *ESLint*, *app directory*, etc.\r\n\r\nAfter everything finishes downloading we should be able to run our application in development mode using `npm run dev`. But we want to run this app using *Docker* so lets create a *Dockerfile*:\r\n```bash\r\ntouch Dockerfile\r\n```\r\nInspired by [Next.js's dev Dockerfile example](https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/next-app/dev.Dockerfile), let's write instructions to copy the source code over to the container's /app directory, install the necessary dependencies and run the application in development mode:\r\n```dockerfile\r\nFROM node:alpine\r\n\r\nRUN mkdir -p /app\r\nWORKDIR /app\r\nCOPY package*.json /app\r\nRUN npm install\r\nCOPY . /app\r\nEXPOSE 3000\r\n\r\nCMD [\"npm\", \"run\", \"dev\"]\r\n```\r\nAt this point we have a runnable docker container for our app. Let's get started with our *docker-compose.yaml* and add a profile for this app.\r\n```bash\r\ntouch docker-compose.yaml\r\n```\r\n```yaml\r\nversion: \"3\"\r\nservices:\r\n  next-app:\r\n    container_name: next-app\r\n    build:\r\n      dockerfile: Dockerfile\r\n    volumes:\r\n      - ./src:/app/src\r\n      - ./public:/app/public\r\n    restart: always\r\n    ports:\r\n      - 3000:3000\r\n```\r\nNow our app can be run by running `docker compose up`.\r\n\r\n## Creating the Postgres Database\r\n\r\nLet's create a local database using the official [Postgres Docker image](https://hub.docker.com/_/postgres).\r\nWe can do this by appending the following to our *docker-compose.yaml*:\r\n```yaml\r\n  postgres-db:\r\n    image: postgres:16.0\r\n    container_name: postgres-db\r\n    restart: always\r\n    environment:\r\n      POSTGRES_DB: example\r\n      POSTGRES_USER: root\r\n      POSTGRES_PASSWORD: 123\r\n    ports:\r\n      - 5432:5432\r\n```\r\nNow `docker compose up` additionally spins up a local database which we can connect to by adding the following connection string to a *.env* file in the root of our *Next.js* project:\r\n```bash\r\nPOSTGRES_URL=\"postgres://root:123@localhost:5432/example\"\r\n```\r\nWe currently have no way of testing our database through our *Next.js* app but we can verify that the database is running by executing `psql example` through *Docker Desktop*:\r\n![Docker Desktop](/assets/docker-desktop-psql.png)\r\n\r\n## Populating the Database\r\nTo interact with our database from our *Next.js* app we need an ORM tool. Let's install my favorite database ORM *drizzle-orm*:\r\n```bash\r\nnpm install drizzle-orm postgres pg\r\nnpm install -D drizzle-kit\r\n```\r\nNow let's set up our first table using *drizzle-orm* by loosely following the [official quick start example](https://orm.drizzle.team/kit-docs/quick):\r\n\r\n1. Create our first schema:\r\n\r\n```bash\r\ntouch src/schema/post.ts\r\n```\r\n```typescript\r\nimport { serial, text, timestamp, pgTable } from \"drizzle-orm/pg-core\";\r\n\r\nexport const post = pgTable(\"post\", {\r\n  id: serial(\"id\"),\r\n  text: text(\"text\"),\r\n  createdAt: timestamp(\"created_at\").default(new Date()),\r\n});\r\n```\r\n\r\n2. Create our *drizzle* configuration:\r\n\r\n```bash\r\ntouch drizzle.config.ts\r\n```\r\n```typescript\r\nimport type { Config } from \"drizzle-kit\";\r\n\r\nexport default {\r\n  schema: \"./src/schemas/*.ts\",\r\n  out: \"./src/migrations\",\r\n  driver: \"pg\",\r\n  dbCredentials: {\r\n    connectionString: process.env.POSTGRES_URL!,\r\n  },\r\n} satisfies Config;\r\n```\r\n\r\n3. Create our first migration:\r\n\r\n```bash\r\nnpx drizzle-kit generate:pg\r\n```\r\nThis will create a migration file under *src/migrations*.\r\n\r\n4. Apply our migration:\r\n\r\nFirst let's install some necessary dev dependencies:\r\n```bash\r\nnpm install -D dotenv tsx\r\n```\r\n\r\nThen we can create a migration script:\r\n```bash\r\ntouch src/scripts/migrate.ts\r\n```\r\n```typescript\r\nimport postgres from \"postgres\";\r\nimport { migrate } from \"drizzle-orm/postgres-js/migrator\";\r\nimport { drizzle } from \"drizzle-orm/postgres-js\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\n(async () => {\r\n  const connectionString = process.env.POSTGRES_URL!;\r\n\r\n  const migrationsClient = postgres(connectionString, { max: 1 });\r\n  const db = drizzle(migrationsClient);\r\n\r\n  await migrate(db, { migrationsFolder: \"./src/migrations\" });\r\n\r\n  await migrationsClient.end();\r\n})();\r\n```\r\nNow we can apply our migration by running the script like so:\r\n```bash\r\nnpx tsx src/scripts/migration.tsx\r\n```\r\n\r\nFinally we can populate our database using *Drizzle Studio*:\r\n```bash\r\nnpx drizzle-kit studio\r\n```\r\n![Drizzle Studio](/assets/drizzle-studio.png)\r\n\r\n## Connecting to the Database\r\n\r\nNow that we have a database up-and-running with data, let's display it in our *Next.js* app!\r\nTo do that we must first create a database client:\r\n\r\n```bash\r\ntouch src/db.ts\r\n```\r\n```typescript\r\nimport { drizzle, type PostgresJsDatabase } from \"drizzle-orm/postgres-js\";\r\nimport postgres from \"postgres\";\r\n\r\n// Fix for \"sorry, too many clients already\"\r\ndeclare global {\r\n  // eslint-disable-next-line no-var -- only var works here\r\n  var db: PostgresJsDatabase | undefined;\r\n}\r\n\r\nlet db: PostgresJsDatabase;\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n  db = drizzle(postgres(process.env.POSTGRES_URL!));\r\n} else {\r\n  if (!global.db) global.db = drizzle(postgres(process.env.POSTGRES_URL!));\r\n\r\n  db = global.db;\r\n}\r\n\r\nexport { db };\r\n```\r\nUsing this client, let's display the text from our first post entry by replacing the contents of *src/app/page.tsx* with the following:\r\n```tsx\r\nimport { db } from \"@/db\";\r\nimport { post } from \"@/schemas/post\";\r\nimport styles from \"./page.module.css\";\r\n\r\nexport default async function Home() {\r\n  const posts = await db.select().from(post);\r\n\r\n  return <main className={styles.main}>{posts[0].text}</main>;\r\n}\r\n```\r\nIf we run our *Next.js* app locally we should see a black screen with the text \"Hello World\".\r\nBut if we run this using *Docker Compose* we will get an error because our *Next.js* container is unable to connect to our *Postgres* container.\r\nThis is because our connection string uses localhost but for docker containers to connect to one another they must use the appropriate *Docker Compose* service name.\r\n\r\nLet's fix this by adding the following line to our *.env* file:\r\n```bash\r\nDOCKER_POSTGRES_URL=\"postgres://root:123@postgres-db:5432/example\"\r\n```\r\nAnd let's tell *Docker Compose* to replace *POSTGRES_URL* with *DOCKER_POSTGRES_URL* by adding the following to our *docker-compose.yaml*'s next-app section:\r\n```yaml\r\nenvironment:\r\n  POSTGRES_URL: ${DOCKER_POSTGRES_URL}\r\n```\r\nIf we run `docker compose up` now, we should see our text displaying correctly.\r\nBut if we save any additional changes while the app is running, our app does not update...\r\n\r\n## Enabling Docker Compose Watch\r\n\r\nTo leverage the hot-module reloading capabilities of `docker compose watch` we must define watch actions in our *docker-compose.yaml* to tell *Docker Compose* to sync our code when we save it.\r\nTo do this, replace our previously defined volumes with appropriate sync actions so that the final *docker-compose.yaml* file looks like this:\r\n```yaml\r\nversion: \"3\"\r\nservices:\r\n  next-app:\r\n    container_name: next-app\r\n    restart: always\r\n    build:\r\n      dockerfile: Dockerfile\r\n    environment:\r\n      POSTGRES_URL: ${DOCKER_POSTGRES_URL}\r\n    develop:\r\n      watch:\r\n        - action: sync\r\n          path: ./src\r\n          target: /app/src\r\n          ignore:\r\n            - node_modules/\r\n        - action: sync\r\n          path: ./public\r\n          target: /app/public\r\n    ports:\r\n      - 3000:3000\r\n  postgres-db:\r\n    image: postgres:16.0\r\n    container_name: postgres-db\r\n    restart: always\r\n    environment:\r\n      POSTGRES_DB: example\r\n      POSTGRES_USER: root\r\n      POSTGRES_PASSWORD: 123\r\n    ports:\r\n      - 5432:5432\r\n```\r\nNow we can finally run `docker compose watch` to have our 2 containers run and respond to changes!\r\n\r\nAnd as our application grows in complexity we can add additional services to our *Docker Compose* configuration and enjoy the amazing DX benefits of `docker compose watch`.\r\n\r\nThe source code for this project is available on [github](https://github.com/kalmanodds/docker-compose-watch-example).\r\n\r\n## Caveats\r\n\r\n`docker compose watch` does not print container output to the console like `docker compose up`.\r\nTo remedy this, we must attach to the containers in a separate terminal session or inspect the output via Docker Desktop.\r\n\r\nThis new feature also lacks many common option paramters, so running `docker compose watch` in detached mode, for example, does not work.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"creating-the-nextjs-app","text":"Creating the Next.js App"},{"depth":2,"slug":"creating-the-postgres-database","text":"Creating the Postgres Database"},{"depth":2,"slug":"populating-the-database","text":"Populating the Database"},{"depth":2,"slug":"connecting-to-the-database","text":"Connecting to the Database"},{"depth":2,"slug":"enabling-docker-compose-watch","text":"Enabling Docker Compose Watch"},{"depth":2,"slug":"caveats","text":"Caveats"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
